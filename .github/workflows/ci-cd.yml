name: CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  unit-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Install modules
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: "**/junit.xml"

  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Install modules
        run: npm ci

      - name: Run linter
        run: npm run lint

  build:
    runs-on: ubuntu-latest
    needs:
      - unit-test
      - lint
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY_URL: europe-west1-docker.pkg.dev
      REGISTRY_USERNAME: _json_key_base64
      IMAGE: weather-api-437916/weather-api/weather-api
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Configure GCP_REGISTRY_PASS variable
        id: gcp-config
        run: |
          GCP_REGISTRY_PASS=$(echo '${{ secrets.GCP_KEY }}' | base64 -w 0)
          echo "GCP_REGISTRY_PASS=$GCP_REGISTRY_PASS" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ steps.gcp-config.outputs.GCP_REGISTRY_PASS }}

      - name: Build Docker image
        run: docker build . --file Dockerfile --tag ${{ env.REGISTRY_URL }}/${{ env.IMAGE }}:latest

      - name: Push to registry
        run: docker push ${{ env.REGISTRY_URL }}/${{ env.IMAGE }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: "actions/checkout@v4"

      - uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_KEY }}

      - id: "deploy"
        uses: "google-github-actions/deploy-cloudrun@v2"
        with:
          service: weather-api-staging
          image: europe-west1-docker.pkg.dev/weather-api-437916/weather-api/weather-api:latest
          region: europe-west1
          env_vars: |-
            APP_ENV=dev
            BASE_URL=https://weather-api-staging-951054010171.europe-west1.run.app
          secrets: |-
            WEATHERBIT_APIKEY=WEATHERBIT_APIKEY:latest

  api-tests:
    name: API tests
    runs-on: ubuntu-latest
    needs:
      - deploy
    steps:
      - uses: actions/checkout@v4
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests
        run: |
          postman collection run "4680034-a31d833e-3e14-4aee-b19d-8d483ab4e476" -e "4680034-d5789bbe-e6d5-48d4-8fb6-d38db9f91e9c"
